// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file foyle/logs/blocks.proto (package foyle.logs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Block, Doc } from "../v1alpha1/doc_pb";

/**
 * BlockLog is the log of what happened to a block. It includes information about how a block was generated (if it
 * was generated by the AI) and how it was executed if it was.
 *
 * @generated from message foyle.logs.BlockLog
 */
export class BlockLog extends Message<BlockLog> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * gen_trace_id is the trace ID of the generation request
   *
   * @generated from field: string gen_trace_id = 2;
   */
  genTraceId = "";

  /**
   * exec_trace_ids are the trace IDs of the execution requests
   * Doc is the doc that triggered the generated block
   *
   * @generated from field: repeated string exec_trace_ids = 3;
   */
  execTraceIds: string[] = [];

  /**
   * doc is the doc that triggered the generated block
   *
   * @generated from field: Doc doc = 4;
   */
  doc?: Doc;

  /**
   * generatedBlock is the block generated by the AI
   *
   * @generated from field: Block generated_block = 5;
   */
  generatedBlock?: Block;

  /**
   * executed_block is the final block that was actually executed
   * nil if the block was not executed
   *
   * @generated from field: Block executed_block = 6;
   */
  executedBlock?: Block;

  /**
   * exit_code is the exit code of the executed block
   *
   * @generated from field: int32 exit_code = 7;
   */
  exitCode = 0;

  /**
   * eval_mode is true if the block was generated as part of an evaluation and shouldn't be used for learning
   *
   * @generated from field: bool eval_mode = 8;
   */
  evalMode = false;

  /**
   * ResourceVersion is an opaque string that can be used for optimistic concurrency control
   *
   * @generated from field: string resource_version = 9;
   */
  resourceVersion = "";

  constructor(data?: PartialMessage<BlockLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "foyle.logs.BlockLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gen_trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exec_trace_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "doc", kind: "message", T: Doc },
    { no: 5, name: "generated_block", kind: "message", T: Block },
    { no: 6, name: "executed_block", kind: "message", T: Block },
    { no: 7, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "eval_mode", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "resource_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockLog {
    return new BlockLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockLog {
    return new BlockLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockLog {
    return new BlockLog().fromJsonString(jsonString, options);
  }

  static equals(a: BlockLog | PlainMessage<BlockLog> | undefined, b: BlockLog | PlainMessage<BlockLog> | undefined): boolean {
    return proto3.util.equals(BlockLog, a, b);
  }
}

