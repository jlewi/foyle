// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file foyle/v1alpha1/trainer.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Block, Doc } from "./doc_pb";

/**
 * Example represents an example to be used in few shot learning
 *
 * @generated from message Example
 */
export class Example extends Message<Example> {
  /**
   * @generated from field: repeated float embedding = 1;
   */
  embedding: number[] = [];

  /**
   * @generated from field: Doc query = 2;
   */
  query?: Doc;

  /**
   * @generated from field: repeated Block answer = 3;
   */
  answer: Block[] = [];

  constructor(data?: PartialMessage<Example>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Example";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "embedding", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 2, name: "query", kind: "message", T: Doc },
    { no: 3, name: "answer", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Example {
    return new Example().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJsonString(jsonString, options);
  }

  static equals(a: Example | PlainMessage<Example> | undefined, b: Example | PlainMessage<Example> | undefined): boolean {
    return proto3.util.equals(Example, a, b);
  }
}

