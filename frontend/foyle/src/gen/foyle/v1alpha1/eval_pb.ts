// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file foyle/v1alpha1/eval.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Example } from "./trainer_pb";
import { Block } from "./doc_pb";

/**
 * @generated from enum EvalResultStatus
 */
export enum EvalResultStatus {
  /**
   * @generated from enum value: UNKNOWN_EVAL_RESULT_STATUS = 0;
   */
  UNKNOWN_EVAL_RESULT_STATUS = 0,

  /**
   * @generated from enum value: DONE = 1;
   */
  DONE = 1,

  /**
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EvalResultStatus)
proto3.util.setEnumType(EvalResultStatus, "EvalResultStatus", [
  { no: 0, name: "UNKNOWN_EVAL_RESULT_STATUS" },
  { no: 1, name: "DONE" },
  { no: 2, name: "ERROR" },
]);

/**
 * EvalResult represents an evaluation result
 *
 * @generated from message EvalResult
 */
export class EvalResult extends Message<EvalResult> {
  /**
   * Example is the answer and expected result
   *
   * @generated from field: Example example = 1;
   */
  example?: Example;

  /**
   * example_file is the file containing the example
   *
   * @generated from field: string example_file = 2;
   */
  exampleFile = "";

  /**
   * Actual response
   *
   * @generated from field: repeated Block actual = 3;
   */
  actual: Block[] = [];

  /**
   * The distance between the actual and expected response
   *
   * @generated from field: int32 distance = 4;
   */
  distance = 0;

  /**
   * @generated from field: float normalized_distance = 7;
   */
  normalizedDistance = 0;

  /**
   * @generated from field: string error = 5;
   */
  error = "";

  /**
   * Status of the evaluation
   *
   * @generated from field: EvalResultStatus status = 6;
   */
  status = EvalResultStatus.UNKNOWN_EVAL_RESULT_STATUS;

  constructor(data?: PartialMessage<EvalResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "EvalResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "example", kind: "message", T: Example },
    { no: 2, name: "example_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actual", kind: "message", T: Block, repeated: true },
    { no: 4, name: "distance", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "normalized_distance", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(EvalResultStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalResult {
    return new EvalResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalResult {
    return new EvalResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalResult {
    return new EvalResult().fromJsonString(jsonString, options);
  }

  static equals(a: EvalResult | PlainMessage<EvalResult> | undefined, b: EvalResult | PlainMessage<EvalResult> | undefined): boolean {
    return proto3.util.equals(EvalResult, a, b);
  }
}

/**
 * @generated from message EvalResultListRequest
 */
export class EvalResultListRequest extends Message<EvalResultListRequest> {
  /**
   * The path of the database to fetch results for
   *
   * @generated from field: string database = 1;
   */
  database = "";

  constructor(data?: PartialMessage<EvalResultListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "EvalResultListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalResultListRequest {
    return new EvalResultListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalResultListRequest {
    return new EvalResultListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalResultListRequest {
    return new EvalResultListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EvalResultListRequest | PlainMessage<EvalResultListRequest> | undefined, b: EvalResultListRequest | PlainMessage<EvalResultListRequest> | undefined): boolean {
    return proto3.util.equals(EvalResultListRequest, a, b);
  }
}

/**
 * @generated from message EvalResultListResponse
 */
export class EvalResultListResponse extends Message<EvalResultListResponse> {
  /**
   * @generated from field: repeated EvalResult items = 1;
   */
  items: EvalResult[] = [];

  constructor(data?: PartialMessage<EvalResultListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "EvalResultListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: EvalResult, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EvalResultListResponse {
    return new EvalResultListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EvalResultListResponse {
    return new EvalResultListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EvalResultListResponse {
    return new EvalResultListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EvalResultListResponse | PlainMessage<EvalResultListResponse> | undefined, b: EvalResultListResponse | PlainMessage<EvalResultListResponse> | undefined): boolean {
    return proto3.util.equals(EvalResultListResponse, a, b);
  }
}

