// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=none"
// @generated from file foyle/v1alpha1/agent.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Block, BlockOutput, Doc } from "./doc_pb";

/**
 * @generated from message GenerateRequest
 */
export class GenerateRequest extends Message<GenerateRequest> {
  /**
   * @generated from field: Doc doc = 1;
   */
  doc?: Doc;

  constructor(data?: PartialMessage<GenerateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GenerateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc", kind: "message", T: Doc },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRequest {
    return new GenerateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRequest {
    return new GenerateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRequest {
    return new GenerateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRequest | PlainMessage<GenerateRequest> | undefined, b: GenerateRequest | PlainMessage<GenerateRequest> | undefined): boolean {
    return proto3.util.equals(GenerateRequest, a, b);
  }
}

/**
 * @generated from message GenerateResponse
 */
export class GenerateResponse extends Message<GenerateResponse> {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks: Block[] = [];

  /**
   * @generated from field: string trace_id = 2;
   */
  traceId = "";

  constructor(data?: PartialMessage<GenerateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GenerateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blocks", kind: "message", T: Block, repeated: true },
    { no: 2, name: "trace_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateResponse {
    return new GenerateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateResponse {
    return new GenerateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateResponse {
    return new GenerateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateResponse | PlainMessage<GenerateResponse> | undefined, b: GenerateResponse | PlainMessage<GenerateResponse> | undefined): boolean {
    return proto3.util.equals(GenerateResponse, a, b);
  }
}

/**
 * @generated from message ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   * @generated from field: Block block = 1;
   */
  block?: Block;

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block", kind: "message", T: Block },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * @generated from message ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
  /**
   * @generated from field: repeated BlockOutput outputs = 1;
   */
  outputs: BlockOutput[] = [];

  constructor(data?: PartialMessage<ExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outputs", kind: "message", T: BlockOutput, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined, b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteResponse, a, b);
  }
}

/**
 * @generated from message StreamGenerateRequest
 */
export class StreamGenerateRequest extends Message<StreamGenerateRequest> {
  /**
   * @generated from oneof StreamGenerateRequest.request
   */
  request: {
    /**
     * @generated from field: FullContext full_context = 1;
     */
    value: FullContext;
    case: "fullContext";
  } | {
    /**
     * @generated from field: BlockUpdate update = 2;
     */
    value: BlockUpdate;
    case: "update";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StreamGenerateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StreamGenerateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_context", kind: "message", T: FullContext, oneof: "request" },
    { no: 2, name: "update", kind: "message", T: BlockUpdate, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGenerateRequest {
    return new StreamGenerateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGenerateRequest {
    return new StreamGenerateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGenerateRequest {
    return new StreamGenerateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGenerateRequest | PlainMessage<StreamGenerateRequest> | undefined, b: StreamGenerateRequest | PlainMessage<StreamGenerateRequest> | undefined): boolean {
    return proto3.util.equals(StreamGenerateRequest, a, b);
  }
}

/**
 * @generated from message FullContext
 */
export class FullContext extends Message<FullContext> {
  /**
   * @generated from field: Doc doc = 1;
   */
  doc?: Doc;

  /**
   * @generated from field: int32 selected = 2;
   */
  selected = 0;

  constructor(data?: PartialMessage<FullContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "FullContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "doc", kind: "message", T: Doc },
    { no: 2, name: "selected", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullContext {
    return new FullContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullContext {
    return new FullContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullContext {
    return new FullContext().fromJsonString(jsonString, options);
  }

  static equals(a: FullContext | PlainMessage<FullContext> | undefined, b: FullContext | PlainMessage<FullContext> | undefined): boolean {
    return proto3.util.equals(FullContext, a, b);
  }
}

/**
 * @generated from message BlockUpdate
 */
export class BlockUpdate extends Message<BlockUpdate> {
  /**
   * @generated from field: string block_id = 1;
   */
  blockId = "";

  /**
   * @generated from field: string block_content = 2;
   */
  blockContent = "";

  constructor(data?: PartialMessage<BlockUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BlockUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "block_content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockUpdate {
    return new BlockUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockUpdate {
    return new BlockUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockUpdate {
    return new BlockUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: BlockUpdate | PlainMessage<BlockUpdate> | undefined, b: BlockUpdate | PlainMessage<BlockUpdate> | undefined): boolean {
    return proto3.util.equals(BlockUpdate, a, b);
  }
}

/**
 * @generated from message Finish
 */
export class Finish extends Message<Finish> {
  /**
   * Indicates whether the completion was accepted or rejected.
   *
   * @generated from field: bool accepted = 1;
   */
  accepted = false;

  constructor(data?: PartialMessage<Finish>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Finish";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accepted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Finish {
    return new Finish().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Finish {
    return new Finish().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Finish {
    return new Finish().fromJsonString(jsonString, options);
  }

  static equals(a: Finish | PlainMessage<Finish> | undefined, b: Finish | PlainMessage<Finish> | undefined): boolean {
    return proto3.util.equals(Finish, a, b);
  }
}

/**
 * @generated from message StreamGenerateResponse
 */
export class StreamGenerateResponse extends Message<StreamGenerateResponse> {
  /**
   * @generated from field: repeated Block blocks = 1;
   */
  blocks: Block[] = [];

  constructor(data?: PartialMessage<StreamGenerateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StreamGenerateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blocks", kind: "message", T: Block, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamGenerateResponse {
    return new StreamGenerateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamGenerateResponse {
    return new StreamGenerateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamGenerateResponse {
    return new StreamGenerateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StreamGenerateResponse | PlainMessage<StreamGenerateResponse> | undefined, b: StreamGenerateResponse | PlainMessage<StreamGenerateResponse> | undefined): boolean {
    return proto3.util.equals(StreamGenerateResponse, a, b);
  }
}

