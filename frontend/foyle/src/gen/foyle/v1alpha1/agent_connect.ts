// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts"
// @generated from file foyle/v1alpha1/agent.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ExecuteRequest, ExecuteResponse, GenerateRequest, GenerateResponse, StreamGenerateRequest, StreamGenerateResponse } from "./agent_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Generate completions using AI
 *
 * @generated from service GenerateService
 */
export const GenerateService = {
  typeName: "GenerateService",
  methods: {
    /**
     * Generate generates new cells given an existing document.
     *
     * @generated from rpc GenerateService.Generate
     */
    generate: {
      name: "Generate",
      I: GenerateRequest,
      O: GenerateResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * Execute code and commands
 *
 * @generated from service ExecuteService
 */
export const ExecuteService = {
  typeName: "ExecuteService",
  methods: {
    /**
     * Execute executes a cell in an existing document.
     *
     * @generated from rpc ExecuteService.Execute
     */
    execute: {
      name: "Execute",
      I: ExecuteRequest,
      O: ExecuteResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * TODO(jeremy): This should move to https://github.com/stateful/runme/tree/main/pkg/api/proto/runme/ai/v1alpha1
 * This was to quickly hack so we could see what the generated client looks like for the connect protocol.
 *
 * @generated from service AIService
 */
export const AIService = {
  typeName: "AIService",
  methods: {
    /**
     * StreamGenerate is a bidirectional streaming RPC for generating completions
     *
     * @generated from rpc AIService.StreamGenerate
     */
    streamGenerate: {
      name: "StreamGenerate",
      I: StreamGenerateRequest,
      O: StreamGenerateResponse,
      kind: MethodKind.BiDiStreaming,
    },
    /**
     * N.B. This is for testing only. Wanted to add a non streaming response which we can use to verify things are working.
     *
     * @generated from rpc AIService.Simple
     */
    simple: {
      name: "Simple",
      I: StreamGenerateRequest,
      O: StreamGenerateResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

