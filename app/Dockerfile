ARG BUILD_IMAGE=golang:1.23
ARG RUNTIME_IMAGE=cgr.dev/chainguard/static:latest
FROM ${BUILD_IMAGE} as builder

# Build Args need to be after the FROM stage otherwise they don't get passed through
ARG VERSION=unknown
ARG DATE=unknown
ARG COMMIT=unknown

WORKDIR /workspace/

COPY . /workspace

WORKDIR /workspace/app

## Build
# The LDFLAG can't be specified multiple times so we use an environment variable to build it up over multiple lines
# -a flag forces a rebuild of the package and its sources; is that what we want?
RUN LDFLAGS="-s -w -X github.com/jlewi/foyle/app/cmd.version=${VERSION}" && \
    LDFLAGS="${LDFLAGS} -X github.com/jlewi/foyle/app/cmd.commit=${COMMIT}" && \
    LDFLAGS="${LDFLAGS} -X github.com/jlewi/foyle/app/cmd.date=${DATE}" && \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on \
    go build \
    -ldflags "${LDFLAGS}" \
    -a -o foyle github.com/jlewi/foyle/app
RUN chmod a+x /workspace/app/foyle

FROM ${RUNTIME_IMAGE}

COPY --from=builder /workspace/app/foyle /

# N.B. Don't set any arguments because we want to be compatible with the images ko builds
ENTRYPOINT ["/foyle"]
