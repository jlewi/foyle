// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package fsql

import (
	"context"
	"time"
)

const getSession = `-- name: GetSession :one
SELECT contextid, starttime, endtime, selectedid, selectedkind, proto FROM sessions
WHERE contextID = ?
`

func (q *Queries) GetSession(ctx context.Context, contextid string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, contextid)
	var i Session
	err := row.Scan(
		&i.Contextid,
		&i.Starttime,
		&i.Endtime,
		&i.Selectedid,
		&i.Selectedkind,
		&i.Proto,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT contextid, starttime, endtime, selectedid, selectedkind, proto FROM sessions
ORDER BY startTime desc limit 25
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Contextid,
			&i.Starttime,
			&i.Endtime,
			&i.Selectedid,
			&i.Selectedkind,
			&i.Proto,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
INSERT OR REPLACE INTO sessions 
(contextID, startTime, endTime, selectedId, selectedKind, proto)
VALUES 
(?, ?, ?, ?, ?, ?)
`

type UpdateSessionParams struct {
	Contextid    string
	Starttime    time.Time
	Endtime      time.Time
	Selectedid   string
	Selectedkind string
	Proto        []byte
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.ExecContext(ctx, updateSession,
		arg.Contextid,
		arg.Starttime,
		arg.Endtime,
		arg.Selectedid,
		arg.Selectedkind,
		arg.Proto,
	)
	return err
}
