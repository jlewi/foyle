// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: foyle/runme/ai.proto

package runme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunmeGenerateServiceClient is the client API for RunmeGenerateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunmeGenerateServiceClient interface {
	Generate(ctx context.Context, in *RunmeGenerateRequest, opts ...grpc.CallOption) (*RunmeGenerateResponse, error)
}

type runmeGenerateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRunmeGenerateServiceClient(cc grpc.ClientConnInterface) RunmeGenerateServiceClient {
	return &runmeGenerateServiceClient{cc}
}

func (c *runmeGenerateServiceClient) Generate(ctx context.Context, in *RunmeGenerateRequest, opts ...grpc.CallOption) (*RunmeGenerateResponse, error) {
	out := new(RunmeGenerateResponse)
	err := c.cc.Invoke(ctx, "/foyle.runme.RunmeGenerateService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunmeGenerateServiceServer is the server API for RunmeGenerateService service.
// All implementations must embed UnimplementedRunmeGenerateServiceServer
// for forward compatibility
type RunmeGenerateServiceServer interface {
	Generate(context.Context, *RunmeGenerateRequest) (*RunmeGenerateResponse, error)
	mustEmbedUnimplementedRunmeGenerateServiceServer()
}

// UnimplementedRunmeGenerateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRunmeGenerateServiceServer struct {
}

func (UnimplementedRunmeGenerateServiceServer) Generate(context.Context, *RunmeGenerateRequest) (*RunmeGenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedRunmeGenerateServiceServer) mustEmbedUnimplementedRunmeGenerateServiceServer() {}

// UnsafeRunmeGenerateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunmeGenerateServiceServer will
// result in compilation errors.
type UnsafeRunmeGenerateServiceServer interface {
	mustEmbedUnimplementedRunmeGenerateServiceServer()
}

func RegisterRunmeGenerateServiceServer(s grpc.ServiceRegistrar, srv RunmeGenerateServiceServer) {
	s.RegisterService(&RunmeGenerateService_ServiceDesc, srv)
}

func _RunmeGenerateService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunmeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunmeGenerateServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foyle.runme.RunmeGenerateService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunmeGenerateServiceServer).Generate(ctx, req.(*RunmeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RunmeGenerateService_ServiceDesc is the grpc.ServiceDesc for RunmeGenerateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunmeGenerateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foyle.runme.RunmeGenerateService",
	HandlerType: (*RunmeGenerateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _RunmeGenerateService_Generate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foyle/runme/ai.proto",
}
