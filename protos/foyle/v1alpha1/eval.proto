syntax = "proto3";

import "foyle/v1alpha1/doc.proto";
import "foyle/v1alpha1/trainer.proto";

import "google/protobuf/struct.proto";

option go_package = "github.com/jlewi/foyle/protos/go/foyle/v1alpha1";

enum EvalResultStatus {
  UNKNOWN_EVAL_RESULT_STATUS = 0;
  DONE = 1;
  ERROR = 2;
}

enum AssertResult {
  UNKNOWN_AssertResult = 0;
  PASSED = 1;
  FAILED = 2;
  SKIPPED = 3;
}

// EvalResult represents an evaluation result
message EvalResult {
  // Example is the answer and expected result
  Example example = 1;

  // example_file is the file containing the example
  string example_file = 2;

  // Actual response
  repeated Block actual = 3;

  // The distance between the actual and expected response
  int32 distance = 4;
  float normalized_distance = 7;
  string error = 5;

  // Status of the evaluation
  EvalResultStatus status = 6;

  // The ID of the generate trace
  string gen_trace_id = 8;

  // Best matching RAG result
  RAGResult best_rag_result = 9;

  repeated Assertion assertions = 10;
}

message Assertion {
  // Name of the assertion
  string name = 1;
  AssertResult result = 2;
  // Human readable detail of the assertion. If there was an error this should contain the error message.
  string detail = 3;
}

message EvalResultListRequest {
  // The path of the database to fetch results for
  string database = 1;
}

message EvalResultListResponse {
  repeated EvalResult items = 1;
}


// AssertionRow represents a row in the assertion table.
// It is intended for returning the results of assertions. In a way that makes it easy to view the assertions
// in a table inside a RunMe notebook. So we need to flatten the data.
message AssertionRow {
  // id of the example
  string id = 1;

  string exampleFile = 2;

  // Document markdown
  string doc_md = 3;
  string answer_md =4;

  // TODO(jeremy): How can we avoid having to add each assertion here
  AssertResult code_after_markdown = 5;
}

message AssertionTableRequest {
  // The path of the database to fetch results for
  string database = 1;
}

message AssertionTableResponse {
  repeated AssertionRow rows = 1;
}

service EvalService {
  rpc List(EvalResultListRequest) returns (EvalResultListResponse) {}
  rpc AssertionTable(AssertionTableRequest) returns (AssertionTableResponse) {}
}