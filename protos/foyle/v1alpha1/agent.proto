syntax = "proto3";

import "google/protobuf/struct.proto";
import "foyle/v1alpha1/doc.proto";

option go_package = "github.com/jlewi/foyle/protos/go/foyle/v1alpha1";

// grpc-gateway
// https://github.com/grpc-ecosystem/grpc-gateway
import "google/api/annotations.proto";


// IMPORTANT:
// If you update or add any new methods to this file then you need to update
// Server.registerGRPCGatewayRoutes to have gin delegate the appropriate requests to the grpc gateway server.

message GenerateRequest {
  Doc doc = 1;
}

message GenerateResponse {
  repeated Block blocks = 1;
  string trace_id = 2;
}

// Generate completions using AI
service GenerateService {
  // Generate generates new cells given an existing document.
  rpc Generate (GenerateRequest) returns (GenerateResponse) {
    option (google.api.http) = {
      post: "/api/v1alpha1/generate"
      body: "*"
    };
  }
}

message ExecuteRequest {
  Block block = 1;
}

message ExecuteResponse {
  repeated BlockOutput outputs = 1;
}

// Execute code and commands
service ExecuteService {
  // Execute executes a cell in an existing document.
  rpc Execute(ExecuteRequest) returns (ExecuteResponse) {
    option (google.api.http) = {
      post: "/api/v1alpha1/execute"
      body: "*"
    };
  }
}

// TODO(jeremy): This should move to https://github.com/stateful/runme/tree/main/pkg/api/proto/runme/ai/v1alpha1
// This was to quickly hack so we could see what the generated client looks like for the connect protocol.
service AIService {
  // StreamGenerate is a bidirectional streaming RPC for generating completions
  rpc StreamGenerate (stream StreamGenerateRequest) returns (stream StreamGenerateResponse) {}
}

message StreamGenerateRequest {
  oneof request {
    FullContext full_context = 1;
    BlockUpdate update = 2;
  }
}

message FullContext {
  Doc doc = 1;
  int32 selected = 2;
}

message BlockUpdate {
  string block_id = 1;
  string block_content = 2;
}

message Finish {
  // Indicates whether the completion was accepted or rejected.
  bool accepted = 1;
}

message StreamGenerateResponse {
  repeated Block blocks = 1;
}