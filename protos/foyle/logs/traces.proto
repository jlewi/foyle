syntax = "proto3";

import "foyle/v1alpha1/agent.proto";
import "foyle/v1alpha1/trainer.proto";
import "runme/runner/v1/runner.proto";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package foyle.logs;

option go_package = "github.com/jlewi/foyle/protos/go/foyle/logs;logspb";

message Trace {
  string id = 1;
  google.protobuf.Timestamp  start_time = 2;
  google.protobuf.Timestamp    end_time = 3;

  // TODO(jeremy): Should these really be spans?
  oneof data {
    GenerateTrace generate = 4;
    ExecuteTrace execute = 5;
    RunMeTrace run_me = 7;
  }

  // Eval mode is true if the trace was generated in eval mode.
  bool eval_mode = 6;

  repeated Span spans = 8;
}

message Span {
  string id = 1;
  oneof data {
    RAGSpan rag = 2;
  }
}

message RAGSpan {
  string query = 1;

  repeated RAGResult results = 2;
}

message GenerateTrace {
  GenerateRequest request = 1;
  GenerateResponse response = 2;
}

message ExecuteTrace {
  ExecuteRequest request = 1;
  ExecuteResponse response = 2;
}

message RunMeTrace {
  runme.runner.v1.ExecuteRequest request = 1;
  runme.runner.v1.ExecuteResponse response = 2;
}

// LogEntries is used to store log lines keyed by a trace id.
message LogEntries {
  repeated string lines = 1;
  string resource_version = 2;
}

// LogsService is for accessing traces and logs.
service LogsService {
  // N.B. This is for testing only. Wanted to add a non streaming response which we can use to verify things are working.
  rpc GetTrace(GetTraceRequest) returns (GetTraceResponse) {}
}

message GetTraceRequest {
  string id = 1;
}

message GetTraceResponse {
  Trace trace = 1;
}