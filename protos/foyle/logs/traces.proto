syntax = "proto3";

import "foyle/logs/logs.proto";
import "foyle/v1alpha1/agent.proto";
import "foyle/v1alpha1/eval.proto";
import "foyle/v1alpha1/providers.proto";
import "foyle/v1alpha1/trainer.proto";
import "foyle/logs/blocks.proto";
import "runme/runner/v1/runner.proto";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "runme/parser/v1/parser.proto";

package foyle.logs;

option go_package = "github.com/jlewi/foyle/protos/go/foyle/logs;logspb";

message Trace {
  string id = 1;
  google.protobuf.Timestamp    end_time = 3;
  google.protobuf.Timestamp  start_time = 2;

  // TODO(jeremy): Should these really be spans?
  oneof data {
    GenerateTrace generate = 4;
  }

  // Eval mode is true if the trace was generated in eval mode.
  bool eval_mode = 6;

  repeated Span spans = 8;

  // Assertions about this trace.
  // Should these be properties of the spans? We'll cross that bridge if we come to it.
  repeated Assertion assertions = 9;

  reserved 5,7;
}

message Span {
  string id = 1;
  oneof data {
    RAGSpan rag = 2;
    LLMSpan llm = 3;
  }
}

message RAGSpan {
  string query = 1;
  repeated RAGResult results = 2;
}

message LLMSpan {
  ModelProvider provider = 1;
  string request_json = 2;
  string response_json = 3;
}

message GenerateTrace {
  GenerateRequest request = 1;
  GenerateResponse response = 2;
}

// LogEntries is used to store log lines keyed by a trace id.
message LogEntries {
  repeated string lines = 1;
  string resource_version = 2;
}

// LogsService is for accessing traces and logs.
service LogsService {
  rpc GetTrace(GetTraceRequest) returns (GetTraceResponse) {}

  rpc GetBlockLog(GetBlockLogRequest) returns (GetBlockLogResponse) {}

  // GetLLMLogs returns the logs associated with an LLM call.
  // These will include the rendered prompt and response. Unlike GetTraceRequest this has the
  // actual prompt and response of the LLM.
  // TODO(jeremy): Can we deprecate this once we start adding the LLM request/response to the trace as an LLMSpan?
  rpc GetLLMLogs(GetLLMLogsRequest) returns (GetLLMLogsResponse) {}

  rpc Status(GetLogsStatusRequest) returns (GetLogsStatusResponse) {}
}

message GetTraceRequest {
  string id = 1;
}

message GetTraceResponse {
  Trace trace = 1;
}

message GetBlockLogRequest {
  string id = 1;
}

message GetBlockLogResponse {
  BlockLog block_log = 1;
}

message GetLLMLogsRequest {
  // Trace ID is the id of the trace
  string trace_id = 1;
  // log_file is the path to the logs to analyze to get the trace
  // TODO(jeremy): We should deprecate this.
  string log_file = 2;
}

message GetLLMLogsResponse {
  // request_html is the html representation of the prompt
  string request_html = 1;
  // response_html is the html representation of the response
  string response_html = 2;

  // The json representation of the request and response. The value will
  // change depending on the LLM provider
  string request_json = 3;
  string response_json = 4;
}
