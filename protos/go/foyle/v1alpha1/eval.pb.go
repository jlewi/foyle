// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: foyle/v1alpha1/eval.proto

package v1alpha1

import (
	v1 "github.com/stateful/runme/v3/pkg/api/gen/proto/go/runme/parser/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EvalResultStatus int32

const (
	EvalResultStatus_UNKNOWN_EVAL_RESULT_STATUS EvalResultStatus = 0
	EvalResultStatus_DONE                       EvalResultStatus = 1
	EvalResultStatus_ERROR                      EvalResultStatus = 2
)

// Enum value maps for EvalResultStatus.
var (
	EvalResultStatus_name = map[int32]string{
		0: "UNKNOWN_EVAL_RESULT_STATUS",
		1: "DONE",
		2: "ERROR",
	}
	EvalResultStatus_value = map[string]int32{
		"UNKNOWN_EVAL_RESULT_STATUS": 0,
		"DONE":                       1,
		"ERROR":                      2,
	}
)

func (x EvalResultStatus) Enum() *EvalResultStatus {
	p := new(EvalResultStatus)
	*p = x
	return p
}

func (x EvalResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvalResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_foyle_v1alpha1_eval_proto_enumTypes[0].Descriptor()
}

func (EvalResultStatus) Type() protoreflect.EnumType {
	return &file_foyle_v1alpha1_eval_proto_enumTypes[0]
}

func (x EvalResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvalResultStatus.Descriptor instead.
func (EvalResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{0}
}

type AssertResult int32

const (
	AssertResult_UNKNOWN_AssertResult AssertResult = 0
	AssertResult_PASSED               AssertResult = 1
	AssertResult_FAILED               AssertResult = 2
	AssertResult_SKIPPED              AssertResult = 3
)

// Enum value maps for AssertResult.
var (
	AssertResult_name = map[int32]string{
		0: "UNKNOWN_AssertResult",
		1: "PASSED",
		2: "FAILED",
		3: "SKIPPED",
	}
	AssertResult_value = map[string]int32{
		"UNKNOWN_AssertResult": 0,
		"PASSED":               1,
		"FAILED":               2,
		"SKIPPED":              3,
	}
)

func (x AssertResult) Enum() *AssertResult {
	p := new(AssertResult)
	*p = x
	return p
}

func (x AssertResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertResult) Descriptor() protoreflect.EnumDescriptor {
	return file_foyle_v1alpha1_eval_proto_enumTypes[1].Descriptor()
}

func (AssertResult) Type() protoreflect.EnumType {
	return &file_foyle_v1alpha1_eval_proto_enumTypes[1]
}

func (x AssertResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertResult.Descriptor instead.
func (AssertResult) EnumDescriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{1}
}

type CellsMatchResult int32

const (
	CellsMatchResult_UNKNOWN_CellsMatchResult CellsMatchResult = 0
	CellsMatchResult_MATCH                    CellsMatchResult = 1
	CellsMatchResult_MISMATCH                 CellsMatchResult = 2
)

// Enum value maps for CellsMatchResult.
var (
	CellsMatchResult_name = map[int32]string{
		0: "UNKNOWN_CellsMatchResult",
		1: "MATCH",
		2: "MISMATCH",
	}
	CellsMatchResult_value = map[string]int32{
		"UNKNOWN_CellsMatchResult": 0,
		"MATCH":                    1,
		"MISMATCH":                 2,
	}
)

func (x CellsMatchResult) Enum() *CellsMatchResult {
	p := new(CellsMatchResult)
	*p = x
	return p
}

func (x CellsMatchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellsMatchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_foyle_v1alpha1_eval_proto_enumTypes[2].Descriptor()
}

func (CellsMatchResult) Type() protoreflect.EnumType {
	return &file_foyle_v1alpha1_eval_proto_enumTypes[2]
}

func (x CellsMatchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellsMatchResult.Descriptor instead.
func (CellsMatchResult) EnumDescriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{2}
}

type BlockLogStatus int32

const (
	BlockLogStatus_BLOCK_LOG_STATUS_UNKNOWN BlockLogStatus = 0
	BlockLogStatus_BLOCK_LOG_STATUS_SUCCESS BlockLogStatus = 1
	BlockLogStatus_BLOCK_LOG_STATUS_TIMEOUT BlockLogStatus = 2
)

// Enum value maps for BlockLogStatus.
var (
	BlockLogStatus_name = map[int32]string{
		0: "BLOCK_LOG_STATUS_UNKNOWN",
		1: "BLOCK_LOG_STATUS_SUCCESS",
		2: "BLOCK_LOG_STATUS_TIMEOUT",
	}
	BlockLogStatus_value = map[string]int32{
		"BLOCK_LOG_STATUS_UNKNOWN": 0,
		"BLOCK_LOG_STATUS_SUCCESS": 1,
		"BLOCK_LOG_STATUS_TIMEOUT": 2,
	}
)

func (x BlockLogStatus) Enum() *BlockLogStatus {
	p := new(BlockLogStatus)
	*p = x
	return p
}

func (x BlockLogStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockLogStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_foyle_v1alpha1_eval_proto_enumTypes[3].Descriptor()
}

func (BlockLogStatus) Type() protoreflect.EnumType {
	return &file_foyle_v1alpha1_eval_proto_enumTypes[3]
}

func (x BlockLogStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockLogStatus.Descriptor instead.
func (BlockLogStatus) EnumDescriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{3}
}

type Assertion_Name int32

const (
	Assertion_UNKNOWN             Assertion_Name = 0
	Assertion_CODE_AFTER_MARKDOWN Assertion_Name = 1
	Assertion_ONE_CODE_CELL       Assertion_Name = 2
	Assertion_ENDS_WITH_CODE_CELL Assertion_Name = 3
	// NON_EMPTY_DOC asserts that the document sent to the LLM is non empty
	Assertion_NON_EMPTY_DOC Assertion_Name = 4
	// AT_LEAST_ONE_BLOCK asserts that at at least one block was generated from the response before post processing
	Assertion_AT_LEAST_ONE_BLOCK Assertion_Name = 5
	// AT_LEAST_ONE_POST_PROCESSED asserts that at at least one block is returned after post-processing
	Assertion_AT_LEAST_ONE_BLOCK_POST_PROCESSED Assertion_Name = 6
)

// Enum value maps for Assertion_Name.
var (
	Assertion_Name_name = map[int32]string{
		0: "UNKNOWN",
		1: "CODE_AFTER_MARKDOWN",
		2: "ONE_CODE_CELL",
		3: "ENDS_WITH_CODE_CELL",
		4: "NON_EMPTY_DOC",
		5: "AT_LEAST_ONE_BLOCK",
		6: "AT_LEAST_ONE_BLOCK_POST_PROCESSED",
	}
	Assertion_Name_value = map[string]int32{
		"UNKNOWN":                           0,
		"CODE_AFTER_MARKDOWN":               1,
		"ONE_CODE_CELL":                     2,
		"ENDS_WITH_CODE_CELL":               3,
		"NON_EMPTY_DOC":                     4,
		"AT_LEAST_ONE_BLOCK":                5,
		"AT_LEAST_ONE_BLOCK_POST_PROCESSED": 6,
	}
)

func (x Assertion_Name) Enum() *Assertion_Name {
	p := new(Assertion_Name)
	*p = x
	return p
}

func (x Assertion_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Assertion_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_foyle_v1alpha1_eval_proto_enumTypes[4].Descriptor()
}

func (Assertion_Name) Type() protoreflect.EnumType {
	return &file_foyle_v1alpha1_eval_proto_enumTypes[4]
}

func (x Assertion_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Assertion_Name.Descriptor instead.
func (Assertion_Name) EnumDescriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{1, 0}
}

// EvalResult represents an evaluation result
type EvalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example is the answer and expected result
	Example     *EvalExample `protobuf:"bytes,1,opt,name=example,proto3" json:"example,omitempty"`
	ActualCells []*v1.Cell   `protobuf:"bytes,11,rep,name=actual_cells,json=actualCells,proto3" json:"actual_cells,omitempty"`
	// Error indicates an error generating the completion.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// Status of the evaluation
	Status EvalResultStatus `protobuf:"varint,6,opt,name=status,proto3,enum=EvalResultStatus" json:"status,omitempty"`
	// The ID of the generate trace
	GenTraceId string `protobuf:"bytes,8,opt,name=gen_trace_id,json=genTraceId,proto3" json:"gen_trace_id,omitempty"`
	// Best matching RAG result
	BestRagResult *RAGResult   `protobuf:"bytes,9,opt,name=best_rag_result,json=bestRagResult,proto3" json:"best_rag_result,omitempty"`
	Assertions    []*Assertion `protobuf:"bytes,10,rep,name=assertions,proto3" json:"assertions,omitempty"`
	// cells_match_result is the LLM judge's evaluation of whether the actual and expected response match
	// We use an enum so we can encode unknown
	CellsMatchResult CellsMatchResult `protobuf:"varint,12,opt,name=cells_match_result,json=cellsMatchResult,proto3,enum=CellsMatchResult" json:"cells_match_result,omitempty"`
	// Explanation given by the LLM judge
	JudgeExplanation string `protobuf:"bytes,13,opt,name=judge_explanation,json=judgeExplanation,proto3" json:"judge_explanation,omitempty"`
	// Time in milliseconds to generate the completion
	GenerateTimeMs int64 `protobuf:"varint,14,opt,name=generate_time_ms,json=generateTimeMs,proto3" json:"generate_time_ms,omitempty"`
	// block_log_success indicates whether evaluation successfully waited for the block log before moving
	// onto the next example. If this is false then we potentially failed to learn from this example on subsequent
	// examples.
	BlockLogStatus BlockLogStatus `protobuf:"varint,15,opt,name=block_log_status,json=blockLogStatus,proto3,enum=BlockLogStatus" json:"block_log_status,omitempty"`
}

func (x *EvalResult) Reset() {
	*x = EvalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalResult) ProtoMessage() {}

func (x *EvalResult) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalResult.ProtoReflect.Descriptor instead.
func (*EvalResult) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{0}
}

func (x *EvalResult) GetExample() *EvalExample {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *EvalResult) GetActualCells() []*v1.Cell {
	if x != nil {
		return x.ActualCells
	}
	return nil
}

func (x *EvalResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EvalResult) GetStatus() EvalResultStatus {
	if x != nil {
		return x.Status
	}
	return EvalResultStatus_UNKNOWN_EVAL_RESULT_STATUS
}

func (x *EvalResult) GetGenTraceId() string {
	if x != nil {
		return x.GenTraceId
	}
	return ""
}

func (x *EvalResult) GetBestRagResult() *RAGResult {
	if x != nil {
		return x.BestRagResult
	}
	return nil
}

func (x *EvalResult) GetAssertions() []*Assertion {
	if x != nil {
		return x.Assertions
	}
	return nil
}

func (x *EvalResult) GetCellsMatchResult() CellsMatchResult {
	if x != nil {
		return x.CellsMatchResult
	}
	return CellsMatchResult_UNKNOWN_CellsMatchResult
}

func (x *EvalResult) GetJudgeExplanation() string {
	if x != nil {
		return x.JudgeExplanation
	}
	return ""
}

func (x *EvalResult) GetGenerateTimeMs() int64 {
	if x != nil {
		return x.GenerateTimeMs
	}
	return 0
}

func (x *EvalResult) GetBlockLogStatus() BlockLogStatus {
	if x != nil {
		return x.BlockLogStatus
	}
	return BlockLogStatus_BLOCK_LOG_STATUS_UNKNOWN
}

type Assertion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the assertion
	Name   Assertion_Name `protobuf:"varint,1,opt,name=name,proto3,enum=Assertion_Name" json:"name,omitempty"`
	Result AssertResult   `protobuf:"varint,2,opt,name=result,proto3,enum=AssertResult" json:"result,omitempty"`
	// Human readable detail of the assertion. If there was an error this should contain the error message.
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// id is a unique id of the assertion. This is needed for real time processing of the logs. Since our log
	// processing guarantees at least once semantics, we may end up processing the same log entry about an assertion
	// multiple times. By assigning a unique id to each assertion we can dedupe them.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Assertion) Reset() {
	*x = Assertion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assertion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assertion) ProtoMessage() {}

func (x *Assertion) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assertion.ProtoReflect.Descriptor instead.
func (*Assertion) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{1}
}

func (x *Assertion) GetName() Assertion_Name {
	if x != nil {
		return x.Name
	}
	return Assertion_UNKNOWN
}

func (x *Assertion) GetResult() AssertResult {
	if x != nil {
		return x.Result
	}
	return AssertResult_UNKNOWN_AssertResult
}

func (x *Assertion) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Assertion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EvalResultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path of the database to fetch results for
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *EvalResultListRequest) Reset() {
	*x = EvalResultListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalResultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalResultListRequest) ProtoMessage() {}

func (x *EvalResultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalResultListRequest.ProtoReflect.Descriptor instead.
func (*EvalResultListRequest) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{2}
}

func (x *EvalResultListRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type EvalResultListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EvalResult `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EvalResultListResponse) Reset() {
	*x = EvalResultListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalResultListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalResultListResponse) ProtoMessage() {}

func (x *EvalResultListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalResultListResponse.ProtoReflect.Descriptor instead.
func (*EvalResultListResponse) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{3}
}

func (x *EvalResultListResponse) GetItems() []*EvalResult {
	if x != nil {
		return x.Items
	}
	return nil
}

// AssertionRow represents a row in the assertion table.
// It is intended for returning the results of assertions. In a way that makes it easy to view the assertions
// in a table inside a RunMe notebook. So we need to flatten the data.
type AssertionRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the example
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExampleFile string `protobuf:"bytes,2,opt,name=exampleFile,proto3" json:"exampleFile,omitempty"`
	// Document markdown
	DocMd    string `protobuf:"bytes,3,opt,name=doc_md,json=docMd,proto3" json:"doc_md,omitempty"`
	AnswerMd string `protobuf:"bytes,4,opt,name=answer_md,json=answerMd,proto3" json:"answer_md,omitempty"`
	// TODO(jeremy): How can we avoid having to add each assertion here
	CodeAfterMarkdown AssertResult `protobuf:"varint,5,opt,name=code_after_markdown,json=codeAfterMarkdown,proto3,enum=AssertResult" json:"code_after_markdown,omitempty"`
	OneCodeCell       AssertResult `protobuf:"varint,6,opt,name=one_code_cell,json=oneCodeCell,proto3,enum=AssertResult" json:"one_code_cell,omitempty"`
	EndsWithCodeCell  AssertResult `protobuf:"varint,7,opt,name=ends_with_code_cell,json=endsWithCodeCell,proto3,enum=AssertResult" json:"ends_with_code_cell,omitempty"`
}

func (x *AssertionRow) Reset() {
	*x = AssertionRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionRow) ProtoMessage() {}

func (x *AssertionRow) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionRow.ProtoReflect.Descriptor instead.
func (*AssertionRow) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{4}
}

func (x *AssertionRow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssertionRow) GetExampleFile() string {
	if x != nil {
		return x.ExampleFile
	}
	return ""
}

func (x *AssertionRow) GetDocMd() string {
	if x != nil {
		return x.DocMd
	}
	return ""
}

func (x *AssertionRow) GetAnswerMd() string {
	if x != nil {
		return x.AnswerMd
	}
	return ""
}

func (x *AssertionRow) GetCodeAfterMarkdown() AssertResult {
	if x != nil {
		return x.CodeAfterMarkdown
	}
	return AssertResult_UNKNOWN_AssertResult
}

func (x *AssertionRow) GetOneCodeCell() AssertResult {
	if x != nil {
		return x.OneCodeCell
	}
	return AssertResult_UNKNOWN_AssertResult
}

func (x *AssertionRow) GetEndsWithCodeCell() AssertResult {
	if x != nil {
		return x.EndsWithCodeCell
	}
	return AssertResult_UNKNOWN_AssertResult
}

type AssertionTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path of the database to fetch results for
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *AssertionTableRequest) Reset() {
	*x = AssertionTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionTableRequest) ProtoMessage() {}

func (x *AssertionTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionTableRequest.ProtoReflect.Descriptor instead.
func (*AssertionTableRequest) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{5}
}

func (x *AssertionTableRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

// EvalExample is a datapoint for evaluation
type EvalExample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(jeremy): Right now we are using the id to encode the sessionId that the eval example is associated with.
	// Should we add a sessionId field and not make them the same?
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// time is the time corresponding to the example.
	// Examples need to be replayed in the same order they actually occurred to avoid cheatin
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// FullContext is the context used as input
	FullContext *FullContext `protobuf:"bytes,2,opt,name=full_context,json=fullContext,proto3" json:"full_context,omitempty"`
	// Expected cells is the expected value for generation
	ExpectedCells []*v1.Cell `protobuf:"bytes,3,rep,name=expected_cells,json=expectedCells,proto3" json:"expected_cells,omitempty"`
}

func (x *EvalExample) Reset() {
	*x = EvalExample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalExample) ProtoMessage() {}

func (x *EvalExample) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalExample.ProtoReflect.Descriptor instead.
func (*EvalExample) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{6}
}

func (x *EvalExample) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvalExample) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EvalExample) GetFullContext() *FullContext {
	if x != nil {
		return x.FullContext
	}
	return nil
}

func (x *EvalExample) GetExpectedCells() []*v1.Cell {
	if x != nil {
		return x.ExpectedCells
	}
	return nil
}

type AssertionTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*AssertionRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *AssertionTableResponse) Reset() {
	*x = AssertionTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionTableResponse) ProtoMessage() {}

func (x *AssertionTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionTableResponse.ProtoReflect.Descriptor instead.
func (*AssertionTableResponse) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{7}
}

func (x *AssertionTableResponse) GetRows() []*AssertionRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type GetEvalResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the example to fetch
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetEvalResultRequest) Reset() {
	*x = GetEvalResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvalResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvalResultRequest) ProtoMessage() {}

func (x *GetEvalResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvalResultRequest.ProtoReflect.Descriptor instead.
func (*GetEvalResultRequest) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{8}
}

func (x *GetEvalResultRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetEvalResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportHTML string `protobuf:"bytes,1,opt,name=reportHTML,proto3" json:"reportHTML,omitempty"`
}

func (x *GetEvalResultResponse) Reset() {
	*x = GetEvalResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvalResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvalResultResponse) ProtoMessage() {}

func (x *GetEvalResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvalResultResponse.ProtoReflect.Descriptor instead.
func (*GetEvalResultResponse) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{9}
}

func (x *GetEvalResultResponse) GetReportHTML() string {
	if x != nil {
		return x.ReportHTML
	}
	return ""
}

// ExperimentReport is a report for an experiment
type ExperimentReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// num_examples is the number of examples evaluated in the experiment
	NumExamples int64 `protobuf:"varint,2,opt,name=num_examples,json=numExamples,proto3" json:"num_examples,omitempty"`
	// num_errors is the number of examples that resulted in an error
	NumErrors int64 `protobuf:"varint,3,opt,name=num_errors,json=numErrors,proto3" json:"num_errors,omitempty"`
	// Map from string representation of CellsMatchResult to the number of counts
	CellsMatchCounts     map[string]int32   `protobuf:"bytes,4,rep,name=cells_match_counts,json=cellsMatchCounts,proto3" json:"cells_match_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssertionCounts      []*AssertionCounts `protobuf:"bytes,5,rep,name=assertion_counts,json=assertionCounts,proto3" json:"assertion_counts,omitempty"`
	GenerateLatencyStats []*PercentileStat  `protobuf:"bytes,6,rep,name=generate_latency_stats,json=generateLatencyStats,proto3" json:"generate_latency_stats,omitempty"`
}

func (x *ExperimentReport) Reset() {
	*x = ExperimentReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentReport) ProtoMessage() {}

func (x *ExperimentReport) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentReport.ProtoReflect.Descriptor instead.
func (*ExperimentReport) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{10}
}

func (x *ExperimentReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExperimentReport) GetNumExamples() int64 {
	if x != nil {
		return x.NumExamples
	}
	return 0
}

func (x *ExperimentReport) GetNumErrors() int64 {
	if x != nil {
		return x.NumErrors
	}
	return 0
}

func (x *ExperimentReport) GetCellsMatchCounts() map[string]int32 {
	if x != nil {
		return x.CellsMatchCounts
	}
	return nil
}

func (x *ExperimentReport) GetAssertionCounts() []*AssertionCounts {
	if x != nil {
		return x.AssertionCounts
	}
	return nil
}

func (x *ExperimentReport) GetGenerateLatencyStats() []*PercentileStat {
	if x != nil {
		return x.GenerateLatencyStats
	}
	return nil
}

type AssertionCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    Assertion_Name `protobuf:"varint,1,opt,name=name,proto3,enum=Assertion_Name" json:"name,omitempty"`
	Passed  int32          `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"`
	Failed  int32          `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	Unknown int32          `protobuf:"varint,4,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Skipped int32          `protobuf:"varint,5,opt,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *AssertionCounts) Reset() {
	*x = AssertionCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionCounts) ProtoMessage() {}

func (x *AssertionCounts) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionCounts.ProtoReflect.Descriptor instead.
func (*AssertionCounts) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{11}
}

func (x *AssertionCounts) GetName() Assertion_Name {
	if x != nil {
		return x.Name
	}
	return Assertion_UNKNOWN
}

func (x *AssertionCounts) GetPassed() int32 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *AssertionCounts) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *AssertionCounts) GetUnknown() int32 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *AssertionCounts) GetSkipped() int32 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

// PercentileStat represents a percentile value
type PercentileStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The percentile a value 0 to 1
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	// The value of the percentile
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PercentileStat) Reset() {
	*x = PercentileStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foyle_v1alpha1_eval_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentileStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentileStat) ProtoMessage() {}

func (x *PercentileStat) ProtoReflect() protoreflect.Message {
	mi := &file_foyle_v1alpha1_eval_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentileStat.ProtoReflect.Descriptor instead.
func (*PercentileStat) Descriptor() ([]byte, []int) {
	return file_foyle_v1alpha1_eval_proto_rawDescGZIP(), []int{12}
}

func (x *PercentileStat) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *PercentileStat) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_foyle_v1alpha1_eval_proto protoreflect.FileDescriptor

var file_foyle_v1alpha1_eval_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x6f, 0x79, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x65, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x66, 0x6f, 0x79,
	0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x66, 0x6f, 0x79, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x66, 0x6f, 0x79, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x04, 0x0a,
	0x0a, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6d,
	0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x41, 0x47, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x52, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xac, 0x02, 0x0a, 0x09,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x01,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x4e, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x44, 0x4f, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x22, 0x33, 0x0a, 0x15, 0x45, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22,
	0x3b, 0x0a, 0x16, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa4, 0x02, 0x0a,
	0x0c, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6f, 0x63, 0x4d, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x4d, 0x64, 0x12, 0x3d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x11, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x22, 0x33, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x61,
	0x6c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6d, 0x65, 0x2e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x3b, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48,
	0x54, 0x4d, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x54, 0x4d, 0x4c, 0x22, 0x88, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x55, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x46, 0x0a,
	0x0e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x47, 0x0a, 0x10, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x4d,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x49, 0x0a,
	0x10, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x65, 0x6c,
	0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49,
	0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x02, 0x32, 0xcf, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x42, 0x09, 0x45, 0x76, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6a, 0x6c, 0x65, 0x77, 0x69, 0x2f, 0x66, 0x6f, 0x79, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6f, 0x79, 0x6c, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foyle_v1alpha1_eval_proto_rawDescOnce sync.Once
	file_foyle_v1alpha1_eval_proto_rawDescData = file_foyle_v1alpha1_eval_proto_rawDesc
)

func file_foyle_v1alpha1_eval_proto_rawDescGZIP() []byte {
	file_foyle_v1alpha1_eval_proto_rawDescOnce.Do(func() {
		file_foyle_v1alpha1_eval_proto_rawDescData = protoimpl.X.CompressGZIP(file_foyle_v1alpha1_eval_proto_rawDescData)
	})
	return file_foyle_v1alpha1_eval_proto_rawDescData
}

var file_foyle_v1alpha1_eval_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_foyle_v1alpha1_eval_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_foyle_v1alpha1_eval_proto_goTypes = []interface{}{
	(EvalResultStatus)(0),          // 0: EvalResultStatus
	(AssertResult)(0),              // 1: AssertResult
	(CellsMatchResult)(0),          // 2: CellsMatchResult
	(BlockLogStatus)(0),            // 3: BlockLogStatus
	(Assertion_Name)(0),            // 4: Assertion.Name
	(*EvalResult)(nil),             // 5: EvalResult
	(*Assertion)(nil),              // 6: Assertion
	(*EvalResultListRequest)(nil),  // 7: EvalResultListRequest
	(*EvalResultListResponse)(nil), // 8: EvalResultListResponse
	(*AssertionRow)(nil),           // 9: AssertionRow
	(*AssertionTableRequest)(nil),  // 10: AssertionTableRequest
	(*EvalExample)(nil),            // 11: EvalExample
	(*AssertionTableResponse)(nil), // 12: AssertionTableResponse
	(*GetEvalResultRequest)(nil),   // 13: GetEvalResultRequest
	(*GetEvalResultResponse)(nil),  // 14: GetEvalResultResponse
	(*ExperimentReport)(nil),       // 15: ExperimentReport
	(*AssertionCounts)(nil),        // 16: AssertionCounts
	(*PercentileStat)(nil),         // 17: PercentileStat
	nil,                            // 18: ExperimentReport.CellsMatchCountsEntry
	(*v1.Cell)(nil),                // 19: runme.parser.v1.Cell
	(*RAGResult)(nil),              // 20: RAGResult
	(*timestamppb.Timestamp)(nil),  // 21: google.protobuf.Timestamp
	(*FullContext)(nil),            // 22: FullContext
}
var file_foyle_v1alpha1_eval_proto_depIdxs = []int32{
	11, // 0: EvalResult.example:type_name -> EvalExample
	19, // 1: EvalResult.actual_cells:type_name -> runme.parser.v1.Cell
	0,  // 2: EvalResult.status:type_name -> EvalResultStatus
	20, // 3: EvalResult.best_rag_result:type_name -> RAGResult
	6,  // 4: EvalResult.assertions:type_name -> Assertion
	2,  // 5: EvalResult.cells_match_result:type_name -> CellsMatchResult
	3,  // 6: EvalResult.block_log_status:type_name -> BlockLogStatus
	4,  // 7: Assertion.name:type_name -> Assertion.Name
	1,  // 8: Assertion.result:type_name -> AssertResult
	5,  // 9: EvalResultListResponse.items:type_name -> EvalResult
	1,  // 10: AssertionRow.code_after_markdown:type_name -> AssertResult
	1,  // 11: AssertionRow.one_code_cell:type_name -> AssertResult
	1,  // 12: AssertionRow.ends_with_code_cell:type_name -> AssertResult
	21, // 13: EvalExample.time:type_name -> google.protobuf.Timestamp
	22, // 14: EvalExample.full_context:type_name -> FullContext
	19, // 15: EvalExample.expected_cells:type_name -> runme.parser.v1.Cell
	9,  // 16: AssertionTableResponse.rows:type_name -> AssertionRow
	18, // 17: ExperimentReport.cells_match_counts:type_name -> ExperimentReport.CellsMatchCountsEntry
	16, // 18: ExperimentReport.assertion_counts:type_name -> AssertionCounts
	17, // 19: ExperimentReport.generate_latency_stats:type_name -> PercentileStat
	4,  // 20: AssertionCounts.name:type_name -> Assertion.Name
	7,  // 21: EvalService.List:input_type -> EvalResultListRequest
	10, // 22: EvalService.AssertionTable:input_type -> AssertionTableRequest
	13, // 23: EvalService.GetEvalResult:input_type -> GetEvalResultRequest
	8,  // 24: EvalService.List:output_type -> EvalResultListResponse
	12, // 25: EvalService.AssertionTable:output_type -> AssertionTableResponse
	14, // 26: EvalService.GetEvalResult:output_type -> GetEvalResultResponse
	24, // [24:27] is the sub-list for method output_type
	21, // [21:24] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_foyle_v1alpha1_eval_proto_init() }
func file_foyle_v1alpha1_eval_proto_init() {
	if File_foyle_v1alpha1_eval_proto != nil {
		return
	}
	file_foyle_v1alpha1_agent_proto_init()
	file_foyle_v1alpha1_doc_proto_init()
	file_foyle_v1alpha1_trainer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_foyle_v1alpha1_eval_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assertion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalResultListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalResultListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalExample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvalResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEvalResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foyle_v1alpha1_eval_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentileStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foyle_v1alpha1_eval_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_foyle_v1alpha1_eval_proto_goTypes,
		DependencyIndexes: file_foyle_v1alpha1_eval_proto_depIdxs,
		EnumInfos:         file_foyle_v1alpha1_eval_proto_enumTypes,
		MessageInfos:      file_foyle_v1alpha1_eval_proto_msgTypes,
	}.Build()
	File_foyle_v1alpha1_eval_proto = out.File
	file_foyle_v1alpha1_eval_proto_rawDesc = nil
	file_foyle_v1alpha1_eval_proto_goTypes = nil
	file_foyle_v1alpha1_eval_proto_depIdxs = nil
}
