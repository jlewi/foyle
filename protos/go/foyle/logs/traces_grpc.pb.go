// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: foyle/logs/traces.proto

package logspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogsServiceClient is the client API for LogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsServiceClient interface {
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
	// GetLLMLogs returns the logs associated with an LLM call.
	// These will include the rendered prompt and response. Unlike GetTraceRequest this has the
	// actual prompt and response of the LLM.
	GetLLMLogs(ctx context.Context, in *GetLLMLogsRequest, opts ...grpc.CallOption) (*GetLLMLogsResponse, error)
}

type logsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsServiceClient(cc grpc.ClientConnInterface) LogsServiceClient {
	return &logsServiceClient{cc}
}

func (c *logsServiceClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := c.cc.Invoke(ctx, "/foyle.logs.LogsService/GetTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logsServiceClient) GetLLMLogs(ctx context.Context, in *GetLLMLogsRequest, opts ...grpc.CallOption) (*GetLLMLogsResponse, error) {
	out := new(GetLLMLogsResponse)
	err := c.cc.Invoke(ctx, "/foyle.logs.LogsService/GetLLMLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServiceServer is the server API for LogsService service.
// All implementations must embed UnimplementedLogsServiceServer
// for forward compatibility
type LogsServiceServer interface {
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	// GetLLMLogs returns the logs associated with an LLM call.
	// These will include the rendered prompt and response. Unlike GetTraceRequest this has the
	// actual prompt and response of the LLM.
	GetLLMLogs(context.Context, *GetLLMLogsRequest) (*GetLLMLogsResponse, error)
	mustEmbedUnimplementedLogsServiceServer()
}

// UnimplementedLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogsServiceServer struct {
}

func (UnimplementedLogsServiceServer) GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (UnimplementedLogsServiceServer) GetLLMLogs(context.Context, *GetLLMLogsRequest) (*GetLLMLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLLMLogs not implemented")
}
func (UnimplementedLogsServiceServer) mustEmbedUnimplementedLogsServiceServer() {}

// UnsafeLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServiceServer will
// result in compilation errors.
type UnsafeLogsServiceServer interface {
	mustEmbedUnimplementedLogsServiceServer()
}

func RegisterLogsServiceServer(s grpc.ServiceRegistrar, srv LogsServiceServer) {
	s.RegisterService(&LogsService_ServiceDesc, srv)
}

func _LogsService_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foyle.logs.LogsService/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogsService_GetLLMLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLLMLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServiceServer).GetLLMLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/foyle.logs.LogsService/GetLLMLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServiceServer).GetLLMLogs(ctx, req.(*GetLLMLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogsService_ServiceDesc is the grpc.ServiceDesc for LogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "foyle.logs.LogsService",
	HandlerType: (*LogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrace",
			Handler:    _LogsService_GetTrace_Handler,
		},
		{
			MethodName: "GetLLMLogs",
			Handler:    _LogsService_GetLLMLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "foyle/logs/traces.proto",
}
