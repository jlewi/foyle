// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: foyle/logs/sessions.proto

package logspbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	logs "github.com/jlewi/foyle/protos/go/foyle/logs"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionsServiceName is the fully-qualified name of the SessionsService service.
	SessionsServiceName = "foyle.logs.SessionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionsServiceGetSessionProcedure is the fully-qualified name of the SessionsService's
	// GetSession RPC.
	SessionsServiceGetSessionProcedure = "/foyle.logs.SessionsService/GetSession"
	// SessionsServiceListSessionsProcedure is the fully-qualified name of the SessionsService's
	// ListSessions RPC.
	SessionsServiceListSessionsProcedure = "/foyle.logs.SessionsService/ListSessions"
	// SessionsServiceDumpExamplesProcedure is the fully-qualified name of the SessionsService's
	// DumpExamples RPC.
	SessionsServiceDumpExamplesProcedure = "/foyle.logs.SessionsService/DumpExamples"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionsServiceServiceDescriptor            = logs.File_foyle_logs_sessions_proto.Services().ByName("SessionsService")
	sessionsServiceGetSessionMethodDescriptor   = sessionsServiceServiceDescriptor.Methods().ByName("GetSession")
	sessionsServiceListSessionsMethodDescriptor = sessionsServiceServiceDescriptor.Methods().ByName("ListSessions")
	sessionsServiceDumpExamplesMethodDescriptor = sessionsServiceServiceDescriptor.Methods().ByName("DumpExamples")
)

// SessionsServiceClient is a client for the foyle.logs.SessionsService service.
type SessionsServiceClient interface {
	// GetSession returns a session
	GetSession(context.Context, *connect.Request[logs.GetSessionRequest]) (*connect.Response[logs.GetSessionResponse], error)
	// ListSessions returns a list of sessions
	ListSessions(context.Context, *connect.Request[logs.ListSessionsRequest]) (*connect.Response[logs.ListSessionsResponse], error)
	// DumpExamples from the sessions
	DumpExamples(context.Context, *connect.Request[logs.DumpExamplesRequest]) (*connect.Response[logs.DumpExamplesResponse], error)
}

// NewSessionsServiceClient constructs a client for the foyle.logs.SessionsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionsServiceClient{
		getSession: connect.NewClient[logs.GetSessionRequest, logs.GetSessionResponse](
			httpClient,
			baseURL+SessionsServiceGetSessionProcedure,
			connect.WithSchema(sessionsServiceGetSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSessions: connect.NewClient[logs.ListSessionsRequest, logs.ListSessionsResponse](
			httpClient,
			baseURL+SessionsServiceListSessionsProcedure,
			connect.WithSchema(sessionsServiceListSessionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dumpExamples: connect.NewClient[logs.DumpExamplesRequest, logs.DumpExamplesResponse](
			httpClient,
			baseURL+SessionsServiceDumpExamplesProcedure,
			connect.WithSchema(sessionsServiceDumpExamplesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionsServiceClient implements SessionsServiceClient.
type sessionsServiceClient struct {
	getSession   *connect.Client[logs.GetSessionRequest, logs.GetSessionResponse]
	listSessions *connect.Client[logs.ListSessionsRequest, logs.ListSessionsResponse]
	dumpExamples *connect.Client[logs.DumpExamplesRequest, logs.DumpExamplesResponse]
}

// GetSession calls foyle.logs.SessionsService.GetSession.
func (c *sessionsServiceClient) GetSession(ctx context.Context, req *connect.Request[logs.GetSessionRequest]) (*connect.Response[logs.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// ListSessions calls foyle.logs.SessionsService.ListSessions.
func (c *sessionsServiceClient) ListSessions(ctx context.Context, req *connect.Request[logs.ListSessionsRequest]) (*connect.Response[logs.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// DumpExamples calls foyle.logs.SessionsService.DumpExamples.
func (c *sessionsServiceClient) DumpExamples(ctx context.Context, req *connect.Request[logs.DumpExamplesRequest]) (*connect.Response[logs.DumpExamplesResponse], error) {
	return c.dumpExamples.CallUnary(ctx, req)
}

// SessionsServiceHandler is an implementation of the foyle.logs.SessionsService service.
type SessionsServiceHandler interface {
	// GetSession returns a session
	GetSession(context.Context, *connect.Request[logs.GetSessionRequest]) (*connect.Response[logs.GetSessionResponse], error)
	// ListSessions returns a list of sessions
	ListSessions(context.Context, *connect.Request[logs.ListSessionsRequest]) (*connect.Response[logs.ListSessionsResponse], error)
	// DumpExamples from the sessions
	DumpExamples(context.Context, *connect.Request[logs.DumpExamplesRequest]) (*connect.Response[logs.DumpExamplesResponse], error)
}

// NewSessionsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionsServiceHandler(svc SessionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionsServiceGetSessionHandler := connect.NewUnaryHandler(
		SessionsServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(sessionsServiceGetSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionsServiceListSessionsHandler := connect.NewUnaryHandler(
		SessionsServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(sessionsServiceListSessionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sessionsServiceDumpExamplesHandler := connect.NewUnaryHandler(
		SessionsServiceDumpExamplesProcedure,
		svc.DumpExamples,
		connect.WithSchema(sessionsServiceDumpExamplesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/foyle.logs.SessionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionsServiceGetSessionProcedure:
			sessionsServiceGetSessionHandler.ServeHTTP(w, r)
		case SessionsServiceListSessionsProcedure:
			sessionsServiceListSessionsHandler.ServeHTTP(w, r)
		case SessionsServiceDumpExamplesProcedure:
			sessionsServiceDumpExamplesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionsServiceHandler struct{}

func (UnimplementedSessionsServiceHandler) GetSession(context.Context, *connect.Request[logs.GetSessionRequest]) (*connect.Response[logs.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("foyle.logs.SessionsService.GetSession is not implemented"))
}

func (UnimplementedSessionsServiceHandler) ListSessions(context.Context, *connect.Request[logs.ListSessionsRequest]) (*connect.Response[logs.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("foyle.logs.SessionsService.ListSessions is not implemented"))
}

func (UnimplementedSessionsServiceHandler) DumpExamples(context.Context, *connect.Request[logs.DumpExamplesRequest]) (*connect.Response[logs.DumpExamplesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("foyle.logs.SessionsService.DumpExamples is not implemented"))
}
